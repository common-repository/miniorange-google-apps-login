<?php
/**
 * Created by PhpStorm.
 * User: Shailesh Suryawanshi
 * Date: 15-03-2018
 * Time: 15:07
 */
class Mo_OAuth_Widget_New extends Mo_Gsuite_Base_Widget {

	public function __construct() {

		$this->widget_name        = Mo_Gsuite_Constants::OAUTH_WIDGET_NAME;
		$this->widget_description = mo_gsuite_( 'Login to Apps with OAuth', 'flw' );
		$this->widget_id          = 'mo_oauth_widget_new';
		parent::__construct();

	}

	public function start_widget_session() {
		parent::start_widget_session();
		//TODO: code for attribute mapping.In premium version.
	}

	public function widget( $args, $instances ) {
		parent::widget_start( $args, $instances ); // TODO: Change the autogenerated stub

		$this->mo_gsuite_oauth_login_form();
		$this->widget_end( $args );
	}

	/**
	 * @param bool $is_from_shortcode
	 *
	 * @return string|void returns the HTML content of widget.
	 */

	public function mo_gsuite_oauth_login_form( $is_from_shortcode = false ) {

		global $post;
		$this->error_message();
		update_option( 'mo_gsuite_oauth_google_enable','1');
		$app_configured = get_mo_gsuite_option( 'mo_gsuite_oauth_google_enable' ) && (!empty(get_mo_gsuite_option( 'mo_oauth_apps_list_test' ))) ? true : false;
		$widget_html    = '';

		if ( is_user_logged_in() ) {
			$widget_html = $this->logged_in_user_form();
		} else {
			$widget_html = $this->logged_out_user_form( $app_configured );
		}
		if ( $is_from_shortcode ) {
			return $widget_html;
		} else {
			echo $widget_html;
		}

	}

	public function error_message() {
		// TODO: Check how this works
		if ( isset( $_SESSION['msg'] ) and $_SESSION['msg'] ) {
			echo '<div class="' . esc_html($_SESSION['msg_class']) . '">' . esc_html($_SESSION['msg']) . '</div>';
			unset( $_SESSION['msg'] );
			unset( $_SESSION['msg_class'] );
		}
	}

	/**
	 * This function shows whatever needed to be showed to the logged in user for the widget text.
	 * @return string:- HTML of the logged in user.
	 */
	public function logged_in_user_form() {

		$current_user       = wp_get_current_user();
		$link_with_username = __( 'Howdy, ', 'flw' ) . $current_user->display_name;
		$logout_url         = wp_logout_url( site_url() );
		/*$logout_url_text    = _e( 'Logout', 'flw' );
		$logout_url_title   = _e( 'Logout', 'flw' );*/

		//ToDo widget text customization.
		$html = '<div id="logged_in_user">
				' . $link_with_username . '|<a href="' . $logout_url . '" title="" >Logout</a>
        </div>';

		return $html;

	}

	/**
	 * This function will give the text for logged out user.
	 * @param $app_configured
	 *
	 * @return string
	 */
	public function logged_out_user_form( $app_configured ) {

		if ( ! $app_configured ) {
			return '<div>No apps configured.</div>';
		}
		$html='';
		//This redundant code of widget style is for code modularity. Do not be smart and remove this. This is intentional.
		$this->mo_oauth_load_login_script();

		$widget_style=$this->get_widget_style();

		$widget_css=$this->get_widget_css();
		$html.=$widget_css;

		if(!Mo_GSuite_Utility::isBlank(get_mo_gsuite_option('mo_oauth_icon_configure_css'))||!Mo_GSuite_Utility::isBlank($widget_style)){
			$html.= '<a href="javascript:void(0)" onClick="moOAuthLogin()"><div class="oauthloginbutton" style="'.$widget_style.'">Google</div></a>';
		}else{
		$image_url=MOV_GSUITE_URL.'includes/images/OAuth/googlelogin.png';
		$html.= '<a href="javascript:void(0)" style="'.$widget_style.'"onClick="moOAuthLogin()">
			<img src="'.MOV_GSUITE_URL.'includes/images/OAuth/googlelogin.png"></a>';

		}
		return $html;

	}

	public function mo_oauth_load_login_script(){
		echo '
		<script type="text/javascript">
		function HandlePopupResult(result) {
			window.location.href = result;
		}

		function moOAuthLogin() {
		    app_name="google";
		    url="'.site_url().'"+"/?option=oauthredirect&app_name="+app_name;
			window.location.href = url; 
		}
	</script>';

	}

	/**
	 * This function will return the style of the widget from the customization settings.
	 * @return string
	 */
	public function get_widget_style() {
		$style = '';
		$style .= get_option( 'mo_oauth_icon_height' ) ? "height:" . get_option( 'mo_oauth_icon_height' ) . ";" : "";
		$style .= get_option('mo_oauth_icon_margin') ? "margin:".get_option('mo_oauth_icon_margin').";" : "";
		$style .= get_option('mo_oauth_icon_width') ? "width:".get_option('mo_oauth_icon_width').";" : "";

		return $style;
	}

	/**
	 * Get the css of for the widget
	 * @return string
	 */
	public function get_widget_css(){
		$html='';
		if(Mo_GSuite_Utility::isBlank(get_option('mo_oauth_icon_configure_css'))){
			$html.='<style>.oauthloginbutton{background: #7272dc;height:40px;padding:8px;text-align:center;color:#fff;}</style>';
		}else{
			$html.='<style>'.get_mo_gsuite_option('mo_oauth_icon_configure_css').'</style>';
		}

		return $html;

	}

	/**
	 *
	 */
	function register_widget_styles() {
		wp_enqueue_style( 'style_login_widget', MOV_GSUITE_URL . 'includes/css/style_settings_oauth.css' );
	}


}


function register_mo_oauth_widget_new() {
	register_widget( 'Mo_OAuth_Widget_New' );
}
add_action( 'widgets_init', 'register_mo_oauth_widget_new' );

function mo_oauth_shortcode_login(){
	$mowidget = new Mo_Oauth_Widget_new;
	return $mowidget->mo_gsuite_oauth_login_form(true);
}
add_shortcode('mo_oauth_login','mo_oauth_shortcode_login');
